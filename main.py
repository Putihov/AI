# NOTE: –î–ª—è Render Web Service –Ω—É–∂–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å –≤–µ–±—Ö—É–∫–∞–º–∏:
# requirements.txt ‚Üí python-telegram-bot[webhooks]==20.3

import os
import base64
import logging
from datetime import datetime
from dotenv import load_dotenv
import json
from typing import Dict
import re
import requests

from google.oauth2.service_account import Credentials
import gspread
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ============================
# ENV & CONFIG
# ============================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "FLEX")

logging.basicConfig(level=logging.INFO)

# ============================
# GOOGLE SHEETS
# ============================
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
creds_dict = json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON"))
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
client = gspread.authorize(creds)
ss = client.open(GOOGLE_SHEET_NAME)
containers_ws = ss.sheet1

# ============================
# STATE (–ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥)
# ============================
# chain: booking -> photo -> beams -> addons -> sheets
user_state: Dict[int, Dict] = {}

# ============================
# OCR (VISION): –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏
#   –û—Å–Ω–æ–≤–Ω–∞—è: gpt-4o  (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
#   Fallback: gpt-4.1  (–∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç-–ø—Ä–æ—Ö–æ–¥, –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã)
# ============================
OPENAI_CHAT_URL = "https://api.openai.com/v1/chat/completions"
HEADERS = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}

RE_CONTAINER = re.compile(r"^[A-Z]{4}[0-9]{7}$")
RE_FLEX = re.compile(r"^B3G[0-9]{8,10}[A-Z]-2[56]Q$")


def _extract_match(text: str, mode: str) -> str | None:
    text = (text or "").upper()
    regex = RE_CONTAINER if mode == "container" else RE_FLEX
    m = regex.search(text)
    return m.group(0) if m else None


def ocr_gpt_base64(img_b64: str, mode: str) -> str:
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë–º –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ gpt-4o. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–±—É–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å –∂—ë—Å—Ç–∫–∏–º regex."""
    try:
        base_prompt = (
            "–ù–∞ —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä. –ù–∞–π–¥–∏ –Ω–æ–º–µ—Ä ISO 6346. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä." if mode == "container" else
            "–ù–∞ —Ñ–æ—Ç–æ —ç—Ç–∏–∫–µ—Ç–∫–∞ —Ñ–ª–µ–∫—Å–∏‚Äë—Ç–∞–Ω–∫–∞. –ù–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å B3G –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è -25Q –∏–ª–∏ -26Q. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä."
        )

        def ask(prompt_text: str) -> str:
            payload = {
                "model": "gpt-4o",
                "temperature": 0,
                "messages": [
                    {"role": "system", "content": "–¢—ã ‚Äî OCR-—Å–∏—Å—Ç–µ–º–∞. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞–π–¥–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."},
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt_text},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}},
                        ],
                    },
                ],
                "max_tokens": 30,
            }
            r = requests.post(OPENAI_CHAT_URL, headers=HEADERS, json=payload, timeout=60)
            r.raise_for_status()
            return r.json()["choices"][0]["message"]["content"].strip()

        # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        out1 = ask(base_prompt)
        token = _extract_match(out1, mode)
        if token:
            return token

        # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–∏–º –æ–¥–∏–Ω –º–∞—Ç—á –ø–æ regex
        strict_regex = "^[A-Z]{4}[0-9]{7}$" if mode == "container" else "^B3G[0-9]{8,10}[A-Z]-2[56]Q$"
        out2 = ask(f"–ù–∞–π–¥–∏ –∏ –≤—ã–≤–µ–¥–∏ –û–î–ò–ù –Ω–æ–º–µ—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π regex: {strict_regex}. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.")
        token = _extract_match(out2, mode)
        if token:
            return token

    except Exception as e:
        logging.exception("OpenAI OCR error: %s", e)

    return "–ù–ï –£–î–ê–õ–û–°–¨"

# ============================
# HELPERS
# ============================
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ (–ø–æ –¢–ó), —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å OCR –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–æ—Ç–æ –ø–æ–∑–∂–µ.

def update_sheet_cell(row: int, col: int, value: str):
    try:
        containers_ws.update_cell(row, col, value)
    except Exception as e:
        logging.exception("Sheets update failed (row=%s col=%s): %s", row, col, e)


def append_and_get_row(values: list) -> int:
    containers_ws.append_row(values, value_input_option="USER_ENTERED")
    # –∏–Ω–¥–µ–∫—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ –∫–æ–ª–æ–Ω–∫–∏ E (–±—É–∫–∏–Ω–≥)
    return len(containers_ws.col_values(5))

# ============================
# UI helpers
# ============================

def inline_start_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start_entry")]])


def reply_start_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[KeyboardButton("–ù–∞—á–∞—Ç—å")]], resize_keyboard=True, one_time_keyboard=False)

# ============================
# HANDLERS
# ============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_state[uid] = {"step": "booking", "have_container": False, "have_flex": False}
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—É–∫–∏–Ω–≥–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É).",
        reply_markup=reply_start_kb(),
    )


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    user_state[uid] = {"step": "booking", "have_container": False, "have_flex": False}
    await q.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—É–∫–∏–Ω–≥–∞:")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    uname = update.effective_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    text = (update.message.text or "").strip()
    state = user_state.get(uid, {})
    step = state.get("step")

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞—á–∞—Ç—å¬ª –∏–∑ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
    if re.fullmatch(r"–Ω–∞—á–∞—Ç—å", text, flags=re.IGNORECASE):
        user_state[uid] = {"step": "booking", "have_container": False, "have_flex": False}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—É–∫–∏–Ω–≥–∞:")
        return

    if step == "booking":
        booking = text
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        row = append_and_get_row([now, '', '', '', booking])  # –ó–∞–ø–∏—Å—å –≤ E ‚Äî –±—É–∫–∏–Ω–≥
        update_sheet_cell(row, 18, uname)  # R ‚Äî –ª–æ–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
        user_state[uid] = {"row": row, "booking": booking, "step": "photo", "have_container": False, "have_flex": False}
        await update.message.reply_text("üìå –ë—É–∫–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —Ñ–ª–µ–∫—Å–∞ (–º–æ–∂–Ω–æ –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º).")
        return

    if step == "beams":
        if text.isdigit():
            update_sheet_cell(state["row"], 14, text)  # N ‚Äî –ë–∞–ª–∫–∏
            user_state[uid]["step"] = "addons"
            await update.message.reply_text("üìå –°–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        else:
            await update.message.reply_text("‚ö† –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.")
        return

    if step == "addons":
        if text.isdigit():
            update_sheet_cell(state["row"], 15, text)  # O ‚Äî –î–æ–ø—ã
            user_state[uid]["step"] = "sheets"
            await update.message.reply_text("üìå –°–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        else:
            await update.message.reply_text("‚ö† –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.")
        return

    if step == "sheets":
        if text.isdigit():
            update_sheet_cell(state["row"], 16, text)  # P ‚Äî –õ–∏—Å—Ç—ã
            user_state.pop(uid, None)
            await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=reply_start_kb())
        else:
            await update.message.reply_text("‚ö† –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.")
        return

    # fallback
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥.", reply_markup=reply_start_kb())


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    state = user_state.get(uid)

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ —à–∞–≥–∞—Ö photo –ò–õ–ò beams (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª –∞–ª—å–±–æ–º)
    if not state or state.get("step") not in {"photo", "beams"}:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ –±—É–∫–∏–Ω–≥.", reply_markup=reply_start_kb())
        return

    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    bytes_data = await file.download_as_bytearray()
    img_b64 = base64.b64encode(bytes_data).decode("utf-8")

    # –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –æ–±–∞ –Ω–æ–º–µ—Ä–∞ —Å –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ç–æ. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.
    row = state.get("row")
    if row:
        cont = ocr_gpt_base64(img_b64, "container")
        flex = ocr_gpt_base64(img_b64, "flex")
        if cont != "–ù–ï –£–î–ê–õ–û–°–¨" and not state.get("have_container"):
            update_sheet_cell(row, 6, cont)
            state["have_container"] = True
        if flex != "–ù–ï –£–î–ê–õ–û–°–¨" and not state.get("have_flex"):
            update_sheet_cell(row, 11, flex)
            state["have_flex"] = True

    # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —à–∞–≥ beams, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –æ—à–∏–±–æ–∫
    if state.get("step") == "photo":
        state["step"] = "beams"
        await update.message.reply_text("üì∏ –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –°–∫–æ–ª—å–∫–æ –±–∞–ª–æ–∫?")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ —É–∂–µ –Ω–∞ —à–∞–≥–µ "beams" ‚Äî –º–æ–ª—á–∞ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–º–µ—Ä–∞.
        pass

# ============================
# RUN (WEBHOOK-ONLY for Render Web Service)
# ============================

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "global flags not at the start": –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex —Å IGNORECASE
    app.add_handler(MessageHandler(filters.Regex(re.compile(r"^–Ω–∞—á–∞—Ç—å$", re.IGNORECASE)), handle_text))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # --- WEBHOOK-ONLY ---
    port = int(os.environ.get("PORT", 8443))
    host = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    if not host:
        raise RuntimeError(
            "RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∫–∞–∫ Render Web Service –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        )

    webhook_url = f"https://{host}/{BOT_TOKEN}"
    logging.info(f"‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º webhook –Ω–∞ {webhook_url}, –ø–æ—Ä—Ç={port}")

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=BOT_TOKEN,
        webhook_url=webhook_url,
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True,
    )


if __name__ == "__main__":
    main()
