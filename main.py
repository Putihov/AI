import os
import re
import io
import base64
import logging
from datetime import datetime

from google.oauth2.service_account import Credentials
import gspread
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import requests

# ============================
# CONFIG
# ============================
BOT_TOKEN = "8053566580:AAFW7Y6WOFUsWew_H9uHCv9sVnrvz7C8dmU"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEET_NAME = "FLEX"
AUTHORIZED_USERS_FILE = "authorized_users.txt"
SERVICE_ACCOUNT_FILE = "credentials.json"

logging.basicConfig(level=logging.INFO)

# ============================
# GOOGLE SHEETS
# ============================
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
client = gspread.authorize(creds)
ss = client.open(GOOGLE_SHEET_NAME)
containers_ws = ss.sheet1
try:
    flex_ws = ss.worksheet("FLEX_TANKS")
except gspread.WorksheetNotFound:
    flex_ws = ss.add_worksheet(title="FLEX_TANKS", rows=1000, cols=10)
    flex_ws.append_row(["timestamp", "username", "user_id", "flex_number", "status"])

# ============================
# AUTH HELPERS
# ============================
def load_authorized_users():
    if not os.path.exists(AUTHORIZED_USERS_FILE):
        return set()
    with open(AUTHORIZED_USERS_FILE, "r", encoding="utf-8") as f:
        return set(map(int, filter(None, f.read().splitlines())))

def add_authorized_user(uid: int):
    with open(AUTHORIZED_USERS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{uid}\n")

AUTHORIZED_USERS = load_authorized_users()

# ============================
# ISO 6346 CHECK DIGIT
# ============================
CHAR_MAP = {
    'A': 10, 'B': 12, 'C': 13, 'D': 14, 'E': 15, 'F': 16,
    'G': 17, 'H': 18, 'I': 19, 'J': 20, 'K': 21, 'L': 23,
    'M': 24, 'N': 25, 'O': 26, 'P': 27, 'Q': 28, 'R': 29,
    'S': 30, 'T': 31, 'U': 32, 'V': 34, 'W': 35, 'X': 36,
    'Y': 37, 'Z': 38
}
WEIGHTS = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]

def calc_check_digit(code10: str) -> str:
    total = 0
    for i, ch in enumerate(code10):
        if ch.isdigit():
            val = int(ch)
        else:
            val = CHAR_MAP.get(ch.upper(), 0)
        total += val * WEIGHTS[i]
    rem = total % 11
    return '0' if rem == 10 else str(rem)

# ============================
# OPENAI VISION HELPER (gpt-4o)
# ============================
OPENAI_URL = "https://api.openai.com/v1/chat/completions"
HEADERS = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}

PROMPT_CONTAINER = (
    "–ù–∞ —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –¢–µ–±–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ "
    "–≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 6346: 4 –±—É–∫–≤—ã –∏ 7 —Ü–∏—Ñ—Ä (–ø—Ä–∏–º–µ—Ä: MSKU1234567). "
    "–ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ—á–∏—Ç–∞–µ–º, –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–æ–≤–æ: –ù–ï –£–î–ê–õ–û–°–¨."
)

PROMPT_FLEX = (
    "–ù–∞ —Ñ–æ—Ç–æ —ç—Ç–∏–∫–µ—Ç–∫–∞ —Ñ–ª–µ–∫—Å–∏-—Ç–∞–Ω–∫–∞. –ù–æ–º–µ—Ä –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å B3G. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
    "B3G########X-25Q –∏–ª–∏ B3G########X-26Q (–ø—Ä–∏–º–µ—Ä: B3G24071283B-26Q). "
    "–ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ—á–∏—Ç–∞–µ–º, –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ: –ù–ï –£–î–ê–õ–û–°–¨."
)

def ocr_gpt_base64(img_b64: str, mode: str) -> str:
    prompt = PROMPT_CONTAINER if mode == "container" else PROMPT_FLEX
    payload = {
        "model": "gpt-4o",
        "messages": [
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}},
                ],
            }
        ],
        "max_tokens": 50,
    }
    try:
        r = requests.post(OPENAI_URL, headers=HEADERS, json=payload, timeout=60)
        r.raise_for_status()
        data = r.json()
        return data["choices"][0]["message"]["content"].strip().upper()
    except Exception as e:
        logging.exception("OpenAI request failed: %s", e)
        return "–ù–ï –£–î–ê–õ–û–°–¨"

# ============================
# REGEX PARSERS
# ============================
CONTAINER_FULL = re.compile(r"\b([A-Z]{4})(?:\s|-)?(\d{6})(\d)\b")
FLEX_FULL = re.compile(r"\b(B3G\d{8}[A-Z])[-\s]?(25Q|26Q)\b")

def parse_container(text: str) -> tuple[str, str]:
    m = CONTAINER_FULL.search(text.replace(" ", "")) or CONTAINER_FULL.search(text)
    if not m:
        return "", "–û—à–∏–±–∫–∞ OCR"
    owner = m.group(1)
    six = m.group(2)
    check = m.group(3)
    code10 = owner + six
    if calc_check_digit(code10) != check:
        return owner + six + check, "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è)"
    return owner + six + check, "–£—Å–ø–µ—à–Ω–æ"

def parse_flex(text: str) -> tuple[str, str]:
    t = text.replace(" ", "").replace("‚Äî", "-")
    m = FLEX_FULL.search(t)
    if not m:
        return "", "–û—à–∏–±–∫–∞ OCR"
    number = f"{m.group(1)}-{m.group(2)}"
    return number, "–£—Å–ø–µ—à–Ω–æ"

# ============================
# TELEGRAM BOT
# ============================
scan_mode: dict[int, str] = {}
user_bucket: dict[int, list] = {}

def kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [[KeyboardButton("üì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"), KeyboardButton("üß™ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–ª–µ–∫—Å")],
         [KeyboardButton("–ì–æ—Ç–æ–≤–æ")]],
        resize_keyboard=True,
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ì–æ—Ç–æ–≤–æ‚Äô.",
        reply_markup=kb(),
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid in AUTHORIZED_USERS:
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    AUTHORIZED_USERS.add(uid)
    add_authorized_user(uid)
    await update.message.reply_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    txt = (update.message.text or "").strip().lower()
    if uid not in AUTHORIZED_USERS:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    if txt.startswith("üì¶"):
        scan_mode[uid] = "container"
        user_bucket[uid] = []
        await update.message.reply_text("–†–µ–∂–∏–º: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ì–æ—Ç–æ–≤–æ‚Äô.")
    elif txt.startswith("üß™"):
        scan_mode[uid] = "flex"
        user_bucket[uid] = []
        await update.message.reply_text("–†–µ–∂–∏–º: —Ñ–ª–µ–∫—Å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ì–æ—Ç–æ–≤–æ‚Äô.")
    elif txt == "–≥–æ—Ç–æ–≤–æ":
        await finalize(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in AUTHORIZED_USERS:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. /register")
        return
    if uid not in scan_mode:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    user_bucket.setdefault(uid, []).append(update.message)
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ï—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ ‚Äò–ì–æ—Ç–æ–≤–æ‚Äô.")

async def finalize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    uname = update.effective_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    if uid not in scan_mode or not user_bucket.get(uid):
        await update.message.reply_text("‚ö† –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    mode = scan_mode[uid]
    msgs = user_bucket.pop(uid, [])
    scan_mode.pop(uid, None)

    for m in msgs:
        photo = m.photo[-1]
        f = await context.bot.get_file(photo.file_id)
        byts = await f.download_as_bytearray()
        img_b64 = base64.b64encode(byts).decode("utf-8")

        raw = ocr_gpt_base64(img_b64, mode)
        if mode == "container":
            number, status = parse_container(raw)
            now = datetime.now().strftime("%Y-%m-%d %H:%M")
            containers_ws.append_row([now, uname, uid, number or "–ù–µ —É–¥–∞–ª–æ—Å—å", status])
            await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {number or '–Ω–µ —É–¥–∞–ª–æ—Å—å'} ({status})")
        else:
            number, status = parse_flex(raw)
            now = datetime.now().strftime("%Y-%m-%d %H:%M")
            flex_ws.append_row([now, uname, uid, number or "–ù–µ —É–¥–∞–ª–æ—Å—å", status])
            await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {number or '–Ω–µ —É–¥–∞–ª–æ—Å—å'} ({status})")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
